name: CI/CD Pipeline\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n  release:\n    types: [ published ]\n\nenv:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}\n  PYTHON_VERSION: '3.11'\n  NODE_VERSION: '18'\n\njobs:\n  # 代码质量检查\n  lint-and-test:\n    runs-on: ubuntu-latest\n    services:\n      postgres:\n        image: postgres:13\n        env:\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_DB: test_db\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 5432:5432\n      \n      redis:\n        image: redis:6\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 6379:6379\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ env.PYTHON_VERSION }}\n        cache: 'pip'\n    \n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n        pip install -r requirements-dev.txt\n    \n    - name: Lint with flake8\n      run: |\n        flake8 quant_framework/ --count --select=E9,F63,F7,F82 --show-source --statistics\n        flake8 quant_framework/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics\n    \n    - name: Format check with black\n      run: black --check quant_framework/\n    \n    - name: Import sorting check with isort\n      run: isort --check-only quant_framework/\n    \n    - name: Type checking with mypy\n      run: mypy quant_framework/\n    \n    - name: Security check with bandit\n      run: bandit -r quant_framework/\n    \n    - name: Run tests with pytest\n      env:\n        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db\n        REDIS_URL: redis://localhost:6379/0\n        SECRET_KEY: test-secret-key\n        ENVIRONMENT: test\n      run: |\n        pytest tests/ -v --cov=quant_framework --cov-report=xml --cov-report=html\n    \n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./coverage.xml\n        flags: unittests\n        name: codecov-umbrella\n        fail_ci_if_error: false\n  \n  # 前端测试\n  frontend-test:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        working-directory: ./frontend\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Set up Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: ${{ env.NODE_VERSION }}\n        cache: 'npm'\n        cache-dependency-path: frontend/package-lock.json\n    \n    - name: Install dependencies\n      run: npm ci\n    \n    - name: Lint with ESLint\n      run: npm run lint\n    \n    - name: Type check with TypeScript\n      run: npm run type-check\n    \n    - name: Run tests\n      run: npm run test -- --coverage --watchAll=false\n    \n    - name: Build application\n      run: npm run build\n    \n    - name: Upload build artifacts\n      uses: actions/upload-artifact@v3\n      with:\n        name: frontend-build\n        path: frontend/build/\n        retention-days: 7\n  \n  # 安全扫描\n  security-scan:\n    runs-on: ubuntu-latest\n    needs: [lint-and-test]\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Run Trivy vulnerability scanner\n      uses: aquasecurity/trivy-action@master\n      with:\n        scan-type: 'fs'\n        scan-ref: '.'\n        format: 'sarif'\n        output: 'trivy-results.sarif'\n    \n    - name: Upload Trivy scan results to GitHub Security tab\n      uses: github/codeql-action/upload-sarif@v2\n      if: always()\n      with:\n        sarif_file: 'trivy-results.sarif'\n  \n  # 构建Docker镜像\n  build-images:\n    runs-on: ubuntu-latest\n    needs: [lint-and-test, frontend-test]\n    if: github.event_name != 'pull_request'\n    \n    permissions:\n      contents: read\n      packages: write\n    \n    outputs:\n      backend-image: ${{ steps.meta-backend.outputs.tags }}\n      frontend-image: ${{ steps.meta-frontend.outputs.tags }}\n      backend-digest: ${{ steps.build-backend.outputs.digest }}\n      frontend-digest: ${{ steps.build-frontend.outputs.digest }}\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v3\n    \n    - name: Log in to Container Registry\n      uses: docker/login-action@v3\n      with:\n        registry: ${{ env.REGISTRY }}\n        username: ${{ github.actor }}\n        password: ${{ secrets.GITHUB_TOKEN }}\n    \n    - name: Extract metadata for backend\n      id: meta-backend\n      uses: docker/metadata-action@v5\n      with:\n        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n        tags: |\n          type=ref,event=branch\n          type=ref,event=pr\n          type=semver,pattern={{version}}\n          type=semver,pattern={{major}}.{{minor}}\n          type=sha,prefix={{branch}}-\n    \n    - name: Extract metadata for frontend\n      id: meta-frontend\n      uses: docker/metadata-action@v5\n      with:\n        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend\n        tags: |\n          type=ref,event=branch\n          type=ref,event=pr\n          type=semver,pattern={{version}}\n          type=semver,pattern={{major}}.{{minor}}\n          type=sha,prefix={{branch}}-\n    \n    - name: Build and push backend image\n      id: build-backend\n      uses: docker/build-push-action@v5\n      with:\n        context: .\n        file: ./Dockerfile\n        push: true\n        tags: ${{ steps.meta-backend.outputs.tags }}\n        labels: ${{ steps.meta-backend.outputs.labels }}\n        cache-from: type=gha\n        cache-to: type=gha,mode=max\n        platforms: linux/amd64,linux/arm64\n    \n    - name: Build and push frontend image\n      id: build-frontend\n      uses: docker/build-push-action@v5\n      with:\n        context: ./frontend\n        file: ./frontend/Dockerfile\n        push: true\n        tags: ${{ steps.meta-frontend.outputs.tags }}\n        labels: ${{ steps.meta-frontend.outputs.labels }}\n        cache-from: type=gha\n        cache-to: type=gha,mode=max\n        platforms: linux/amd64,linux/arm64\n  \n  # 部署到测试环境\n  deploy-test:\n    runs-on: ubuntu-latest\n    needs: [build-images]\n    if: github.ref == 'refs/heads/develop'\n    environment: test\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Set up kubectl\n      uses: azure/setup-kubectl@v3\n      with:\n        version: 'v1.28.0'\n    \n    - name: Configure kubectl\n      run: |\n        echo \"${{ secrets.KUBE_CONFIG_TEST }}\" | base64 -d > kubeconfig\n        export KUBECONFIG=kubeconfig\n    \n    - name: Update image tags in manifests\n      run: |\n        sed -i \"s|your-registry.com/quant-framework:latest|${{ needs.build-images.outputs.backend-image }}|g\" k8s/deployment.yaml\n        sed -i \"s|your-registry.com/quant-framework-frontend:latest|${{ needs.build-images.outputs.frontend-image }}|g\" k8s/deployment.yaml\n    \n    - name: Deploy to test environment\n      run: |\n        export KUBECONFIG=kubeconfig\n        kubectl apply -f k8s/namespace.yaml\n        kubectl apply -f k8s/configmap.yaml\n        kubectl apply -f k8s/secrets.yaml\n        kubectl apply -f k8s/pvc.yaml\n        kubectl apply -f k8s/deployment.yaml\n        kubectl apply -f k8s/service.yaml\n        kubectl apply -f k8s/ingress.yaml\n        kubectl apply -f k8s/hpa.yaml\n    \n    - name: Wait for deployment\n      run: |\n        export KUBECONFIG=kubeconfig\n        kubectl rollout status deployment/quant-framework-backend -n quant-framework-test --timeout=600s\n        kubectl rollout status deployment/quant-framework-frontend -n quant-framework-test --timeout=600s\n    \n    - name: Run smoke tests\n      run: |\n        # 等待服务就绪\n        sleep 60\n        # 运行基本健康检查\n        curl -f https://test.quant-framework.com/health || exit 1\n        curl -f https://test.quant-framework.com/api/v1/health || exit 1\n  \n  # 部署到生产环境\n  deploy-prod:\n    runs-on: ubuntu-latest\n    needs: [build-images]\n    if: github.event_name == 'release'\n    environment: production\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Set up kubectl\n      uses: azure/setup-kubectl@v3\n      with:\n        version: 'v1.28.0'\n    \n    - name: Configure kubectl\n      run: |\n        echo \"${{ secrets.KUBE_CONFIG_PROD }}\" | base64 -d > kubeconfig\n        export KUBECONFIG=kubeconfig\n    \n    - name: Update image tags in manifests\n      run: |\n        sed -i \"s|your-registry.com/quant-framework:latest|${{ needs.build-images.outputs.backend-image }}|g\" k8s/deployment.yaml\n        sed -i \"s|your-registry.com/quant-framework-frontend:latest|${{ needs.build-images.outputs.frontend-image }}|g\" k8s/deployment.yaml\n    \n    - name: Deploy to production\n      run: |\n        export KUBECONFIG=kubeconfig\n        kubectl apply -f k8s/namespace.yaml\n        kubectl apply -f k8s/configmap.yaml\n        kubectl apply -f k8s/secrets.yaml\n        kubectl apply -f k8s/pvc.yaml\n        kubectl apply -f k8s/deployment.yaml\n        kubectl apply -f k8s/service.yaml\n        kubectl apply -f k8s/ingress.yaml\n        kubectl apply -f k8s/hpa.yaml\n    \n    - name: Wait for deployment\n      run: |\n        export KUBECONFIG=kubeconfig\n        kubectl rollout status deployment/quant-framework-backend -n quant-framework --timeout=600s\n        kubectl rollout status deployment/quant-framework-frontend -n quant-framework --timeout=600s\n    \n    - name: Run production smoke tests\n      run: |\n        sleep 60\n        curl -f https://quant-framework.com/health || exit 1\n        curl -f https://api.quant-framework.com/health || exit 1\n    \n    - name: Notify deployment success\n      uses: 8398a7/action-slack@v3\n      if: success()\n      with:\n        status: success\n        text: '🚀 Production deployment successful!'\n      env:\n        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}\n    \n    - name: Notify deployment failure\n      uses: 8398a7/action-slack@v3\n      if: failure()\n      with:\n        status: failure\n        text: '❌ Production deployment failed!'\n      env:\n        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}\n