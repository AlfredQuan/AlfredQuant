# Makefile for Quant Framework\n\n.PHONY: help build test lint format clean dev prod deploy rollback health-check\n\n# 默认目标\nhelp:\n\t@echo \"Available commands:\"\n\t@echo \"  build          - Build Docker images\"\n\t@echo \"  test           - Run tests\"\n\t@echo \"  lint           - Run linting\"\n\t@echo \"  format         - Format code\"\n\t@echo \"  clean          - Clean up containers and images\"\n\t@echo \"  dev            - Start development environment\"\n\t@echo \"  prod           - Start production environment\"\n\t@echo \"  deploy         - Deploy to specified environment\"\n\t@echo \"  rollback       - Rollback deployment\"\n\t@echo \"  health-check   - Run health checks\"\n\t@echo \"  logs           - Show logs\"\n\t@echo \"  shell          - Open shell in backend container\"\n\t@echo \"  db-migrate     - Run database migrations\"\n\t@echo \"  db-seed        - Seed database with sample data\"\n\n# 变量定义\nDOCKER_REGISTRY ?= ghcr.io/your-org\nIMAGE_NAME ?= quant-framework\nFRONTEND_IMAGE_NAME ?= quant-framework-frontend\nVERSION ?= latest\nENVIRONMENT ?= dev\n\n# 构建镜像\nbuild:\n\t@echo \"Building Docker images...\"\n\tdocker build -t $(DOCKER_REGISTRY)/$(IMAGE_NAME):$(VERSION) .\n\tdocker build -t $(DOCKER_REGISTRY)/$(FRONTEND_IMAGE_NAME):$(VERSION) ./frontend\n\nbuild-dev:\n\t@echo \"Building development Docker images...\"\n\tdocker build -f Dockerfile.dev -t $(DOCKER_REGISTRY)/$(IMAGE_NAME):dev .\n\tdocker build -f frontend/Dockerfile.dev -t $(DOCKER_REGISTRY)/$(FRONTEND_IMAGE_NAME):dev ./frontend\n\n# 运行测试\ntest:\n\t@echo \"Running tests...\"\n\tdocker-compose -f docker-compose.dev.yml exec backend pytest tests/ -v\n\ntest-coverage:\n\t@echo \"Running tests with coverage...\"\n\tdocker-compose -f docker-compose.dev.yml exec backend pytest tests/ -v --cov=quant_framework --cov-report=html\n\n# 代码检查\nlint:\n\t@echo \"Running linting...\"\n\tdocker-compose -f docker-compose.dev.yml exec backend flake8 quant_framework/\n\tdocker-compose -f docker-compose.dev.yml exec backend mypy quant_framework/\n\tdocker-compose -f docker-compose.dev.yml exec backend bandit -r quant_framework/\n\n# 代码格式化\nformat:\n\t@echo \"Formatting code...\"\n\tdocker-compose -f docker-compose.dev.yml exec backend black quant_framework/\n\tdocker-compose -f docker-compose.dev.yml exec backend isort quant_framework/\n\n# 清理\nclean:\n\t@echo \"Cleaning up...\"\n\tdocker-compose -f docker-compose.dev.yml down -v\n\tdocker-compose -f docker-compose.prod.yml down -v\n\tdocker system prune -f\n\nclean-all:\n\t@echo \"Cleaning up everything...\"\n\tdocker-compose -f docker-compose.dev.yml down -v --rmi all\n\tdocker-compose -f docker-compose.prod.yml down -v --rmi all\n\tdocker system prune -af\n\n# 开发环境\ndev:\n\t@echo \"Starting development environment...\"\n\tdocker-compose -f docker-compose.dev.yml up -d\n\t@echo \"Development environment started!\"\n\t@echo \"Frontend: http://localhost:3000\"\n\t@echo \"Backend API: http://localhost:8000\"\n\t@echo \"API Docs: http://localhost:8000/docs\"\n\ndev-build:\n\t@echo \"Building and starting development environment...\"\n\tdocker-compose -f docker-compose.dev.yml up -d --build\n\ndev-logs:\n\t@echo \"Showing development logs...\"\n\tdocker-compose -f docker-compose.dev.yml logs -f\n\ndev-stop:\n\t@echo \"Stopping development environment...\"\n\tdocker-compose -f docker-compose.dev.yml down\n\n# 生产环境\nprod:\n\t@echo \"Starting production environment...\"\n\tdocker-compose -f docker-compose.prod.yml up -d\n\nprod-build:\n\t@echo \"Building and starting production environment...\"\n\tdocker-compose -f docker-compose.prod.yml up -d --build\n\nprod-logs:\n\t@echo \"Showing production logs...\"\n\tdocker-compose -f docker-compose.prod.yml logs -f\n\nprod-stop:\n\t@echo \"Stopping production environment...\"\n\tdocker-compose -f docker-compose.prod.yml down\n\n# 部署\ndeploy:\n\t@echo \"Deploying to $(ENVIRONMENT) environment...\"\n\t./scripts/deploy.sh $(ENVIRONMENT) $(VERSION)\n\ndeploy-test:\n\t@echo \"Deploying to test environment...\"\n\t./scripts/deploy.sh test $(VERSION)\n\ndeploy-prod:\n\t@echo \"Deploying to production environment...\"\n\t./scripts/deploy.sh prod $(VERSION)\n\n# 回滚\nrollback:\n\t@echo \"Rolling back $(ENVIRONMENT) environment...\"\n\t./scripts/rollback.sh $(ENVIRONMENT)\n\nrollback-test:\n\t@echo \"Rolling back test environment...\"\n\t./scripts/rollback.sh test\n\nrollback-prod:\n\t@echo \"Rolling back production environment...\"\n\t./scripts/rollback.sh prod\n\n# 健康检查\nhealth-check:\n\t@echo \"Running health checks...\"\n\tpython scripts/health_check.py\n\n# 日志\nlogs:\n\t@echo \"Showing logs...\"\n\tdocker-compose -f docker-compose.dev.yml logs -f\n\nlogs-backend:\n\t@echo \"Showing backend logs...\"\n\tdocker-compose -f docker-compose.dev.yml logs -f backend\n\nlogs-frontend:\n\t@echo \"Showing frontend logs...\"\n\tdocker-compose -f docker-compose.dev.yml logs -f frontend\n\nlogs-worker:\n\t@echo \"Showing worker logs...\"\n\tdocker-compose -f docker-compose.dev.yml logs -f worker\n\n# Shell访问\nshell:\n\t@echo \"Opening shell in backend container...\"\n\tdocker-compose -f docker-compose.dev.yml exec backend bash\n\nshell-frontend:\n\t@echo \"Opening shell in frontend container...\"\n\tdocker-compose -f docker-compose.dev.yml exec frontend sh\n\n# 数据库操作\ndb-migrate:\n\t@echo \"Running database migrations...\"\n\tdocker-compose -f docker-compose.dev.yml exec backend python scripts/migrate.py upgrade\n\ndb-migrate-create:\n\t@echo \"Creating new migration...\"\n\tdocker-compose -f docker-compose.dev.yml exec backend python scripts/migrate.py revision --autogenerate -m \"$(MESSAGE)\"\n\ndb-seed:\n\t@echo \"Seeding database with sample data...\"\n\tdocker-compose -f docker-compose.dev.yml exec backend python scripts/init_data.py seed\n\ndb-reset:\n\t@echo \"Resetting database...\"\n\tdocker-compose -f docker-compose.dev.yml exec backend python scripts/init_data.py reset\n\ndb-shell:\n\t@echo \"Opening database shell...\"\n\tdocker-compose -f docker-compose.dev.yml exec postgres psql -U postgres -d quant_framework_dev\n\n# Redis操作\nredis-shell:\n\t@echo \"Opening Redis shell...\"\n\tdocker-compose -f docker-compose.dev.yml exec redis redis-cli\n\nredis-flush:\n\t@echo \"Flushing Redis cache...\"\n\tdocker-compose -f docker-compose.dev.yml exec redis redis-cli FLUSHALL\n\n# 监控\nstats:\n\t@echo \"Showing container stats...\"\n\tdocker stats\n\nps:\n\t@echo \"Showing running containers...\"\n\tdocker-compose -f docker-compose.dev.yml ps\n\n# 备份和恢复\nbackup:\n\t@echo \"Creating database backup...\"\n\t./scripts/backup.py create\n\nrestore:\n\t@echo \"Restoring database from backup...\"\n\t./scripts/backup.py restore $(BACKUP_FILE)\n\n# 安全扫描\nsecurity-scan:\n\t@echo \"Running security scan...\"\n\tdocker run --rm -v $(PWD):/app aquasec/trivy fs /app\n\n# 性能测试\nload-test:\n\t@echo \"Running load tests...\"\n\tdocker run --rm -v $(PWD)/tests/load:/tests --network host loadimpact/k6 run /tests/load_test.js\n\n# 文档生成\ndocs:\n\t@echo \"Generating documentation...\"\n\tdocker-compose -f docker-compose.dev.yml exec backend python -m sphinx.cmd.build -b html docs/ docs/_build/html/\n\n# 依赖更新\nupdate-deps:\n\t@echo \"Updating dependencies...\"\n\tdocker-compose -f docker-compose.dev.yml exec backend pip-compile requirements.in\n\tdocker-compose -f docker-compose.dev.yml exec backend pip-compile requirements-dev.in\n\n# 快速启动（常用组合命令）\nquick-start: dev db-migrate db-seed\n\t@echo \"Quick start completed!\"\n\t@echo \"Frontend: http://localhost:3000\"\n\t@echo \"Backend API: http://localhost:8000\"\n\t@echo \"API Docs: http://localhost:8000/docs\"\n\n# 完整测试套件\nfull-test: lint test test-coverage security-scan\n\t@echo \"Full test suite completed!\"\n\n# 生产就绪检查\nproduction-ready: full-test build health-check\n\t@echo \"Production readiness check completed!\"\n