#!/usr/bin/env python3\n\"\"\"\n项目状态检查脚本\n\"\"\"\n\nimport os\nfrom pathlib import Path\n\ndef check_project_structure():\n    \"\"\"检查项目结构\"\"\"\n    print(\"=\" * 60)\n    print(\"量化投资研究框架 - 项目状态检查\")\n    print(\"=\" * 60)\n    \n    # 检查核心目录\n    core_dirs = [\n        'quant_framework',\n        'quant_framework/core',\n        'quant_framework/data',\n        'quant_framework/services',\n        'quant_framework/backtest',\n        'quant_framework/trading',\n        'quant_framework/jqdata',\n        'quant_framework/performance',\n        'quant_framework/monitoring',\n        'tests',\n        'tests/unit',\n        'tests/integration',\n        'tests/system',\n        'tests/performance',\n        'docs',\n        'scripts',\n        'k8s',\n        'migrations'\n    ]\n    \n    print(\"\\n📁 核心目录结构检查:\")\n    existing_dirs = 0\n    for dir_path in core_dirs:\n        if Path(dir_path).exists():\n            print(f\"  ✅ {dir_path}\")\n            existing_dirs += 1\n        else:\n            print(f\"  ❌ {dir_path}\")\n    \n    print(f\"\\n目录完整性: {existing_dirs}/{len(core_dirs)} ({existing_dirs/len(core_dirs)*100:.1f}%)\")\n    \n    # 检查关键文件\n    key_files = [\n        'README.md',\n        'requirements.txt',\n        'Dockerfile',\n        'docker-compose.yml',\n        'Makefile',\n        '.github/workflows/ci.yml',\n        'docs/user_guide.md',\n        'docs/developer_guide.md',\n        'docs/api_documentation.md',\n        'scripts/deploy.sh',\n        'scripts/health_check.py'\n    ]\n    \n    print(\"\\n📄 关键文件检查:\")\n    existing_files = 0\n    for file_path in key_files:\n        if Path(file_path).exists():\n            print(f\"  ✅ {file_path}\")\n            existing_files += 1\n        else:\n            print(f\"  ❌ {file_path}\")\n    \n    print(f\"\\n文件完整性: {existing_files}/{len(key_files)} ({existing_files/len(key_files)*100:.1f}%)\")\n    \n    # 检查Python模块\n    python_modules = [\n        'quant_framework/__init__.py',\n        'quant_framework/core/__init__.py',\n        'quant_framework/services/strategy_service.py',\n        'quant_framework/services/backtest_service.py',\n        'quant_framework/services/data_service.py',\n        'quant_framework/jqdata/api.py',\n        'quant_framework/performance/cache.py',\n        'quant_framework/performance/query_optimizer.py'\n    ]\n    \n    print(\"\\n🐍 Python模块检查:\")\n    existing_modules = 0\n    for module_path in python_modules:\n        if Path(module_path).exists():\n            print(f\"  ✅ {module_path}\")\n            existing_modules += 1\n        else:\n            print(f\"  ❌ {module_path}\")\n    \n    print(f\"\\n模块完整性: {existing_modules}/{len(python_modules)} ({existing_modules/len(python_modules)*100:.1f}%)\")\n    \n    # 总体评估\n    total_items = len(core_dirs) + len(key_files) + len(python_modules)\n    total_existing = existing_dirs + existing_files + existing_modules\n    overall_completeness = (total_existing / total_items) * 100\n    \n    print(\"\\n\" + \"=\" * 60)\n    print(\"📊 项目完整性总结\")\n    print(\"=\" * 60)\n    print(f\"总检查项: {total_items}\")\n    print(f\"已完成项: {total_existing}\")\n    print(f\"完整性: {overall_completeness:.1f}%\")\n    \n    if overall_completeness >= 90:\n        print(\"\\n🎉 项目结构完整，可以进行部署！\")\n        status = \"READY\"\n    elif overall_completeness >= 70:\n        print(\"\\n⚠️  项目基本完整，建议补充缺失项后部署\")\n        status = \"MOSTLY_READY\"\n    else:\n        print(\"\\n❌ 项目结构不完整，需要继续开发\")\n        status = \"NOT_READY\"\n    \n    print(\"=\" * 60)\n    \n    return {\n        'status': status,\n        'completeness': overall_completeness,\n        'existing_dirs': existing_dirs,\n        'existing_files': existing_files,\n        'existing_modules': existing_modules\n    }\n\ndef generate_next_steps(status_info):\n    \"\"\"生成下一步建议\"\"\"\n    print(\"\\n🚀 下一步建议:\")\n    \n    if status_info['status'] == 'READY':\n        print(\"\"\"\n1. 立即行动项:\n   ✅ 运行完整测试套件\n   ✅ 设置生产环境\n   ✅ 配置监控系统\n   ✅ 准备用户培训\n\n2. 部署准备:\n   📋 配置环境变量\n   📋 设置数据库连接\n   📋 配置SSL证书\n   📋 部署到测试环境\n\n3. 用户准备:\n   👥 准备演示数据\n   👥 编写操作手册\n   👥 录制培训视频\n   👥 组织用户培训\n\"\"\")\n    \n    elif status_info['status'] == 'MOSTLY_READY':\n        print(\"\"\"\n1. 补充缺失项:\n   🔧 检查并补充缺失的文件\n   🔧 完善文档\n   🔧 补充测试用例\n\n2. 质量保证:\n   🧪 运行现有测试\n   🧪 修复发现的问题\n   🧪 进行代码审查\n\n3. 准备部署:\n   📦 准备部署脚本\n   📦 配置环境\n   📦 测试部署流程\n\"\"\")\n    \n    else:\n        print(\"\"\"\n1. 继续开发:\n   💻 完成核心功能开发\n   💻 补充缺失的模块\n   💻 编写测试用例\n\n2. 质量提升:\n   📝 完善文档\n   📝 代码重构\n   📝 性能优化\n\n3. 测试验证:\n   🔍 单元测试\n   🔍 集成测试\n   🔍 系统测试\n\"\"\")\n\nif __name__ == \"__main__\":\n    try:\n        status_info = check_project_structure()\n        generate_next_steps(status_info)\n        \n        # 生成状态报告文件\n        with open('project_status_report.txt', 'w', encoding='utf-8') as f:\n            f.write(f\"项目状态报告\\n\")\n            f.write(f\"生成时间: {Path().cwd()}\\n\")\n            f.write(f\"完整性: {status_info['completeness']:.1f}%\\n\")\n            f.write(f\"状态: {status_info['status']}\\n\")\n        \n        print(f\"\\n📄 状态报告已保存到: project_status_report.txt\")\n        \n    except Exception as e:\n        print(f\"检查过程中出错: {e}\")\n