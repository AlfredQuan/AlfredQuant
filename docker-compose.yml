# 量化投资研究框架 - Docker Compose配置
version: '3.8'

services:
  # 主应用服务
  app:
    build:
      context: .
      target: development
    container_name: quant-framework-app
    ports:
      - "8000:8000"
    environment:
      - QUANT_ENV=development
      - DEBUG=true
      - DATABASE_URL=postgresql://postgres:password@db:5432/quant_framework
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - .:/app
      - ./logs:/app/logs
      - ./data:/app/data
      - ./config:/app/config
    depends_on:
      - db
      - redis
    networks:
      - quant-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Worker服务
  worker:
    build:
      context: .
      target: development
    container_name: quant-framework-worker
    command: poetry run celery -A quant_framework.tasks.celery_app worker --loglevel=info --concurrency=4
    environment:
      - QUANT_ENV=development
      - DATABASE_URL=postgresql://postgres:password@db:5432/quant_framework
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - .:/app
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - db
      - redis
    networks:
      - quant-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "poetry", "run", "celery", "-A", "quant_framework.tasks.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Beat调度服务
  beat:
    build:
      context: .
      target: development
    container_name: quant-framework-beat
    command: poetry run celery -A quant_framework.tasks.celery_app beat --loglevel=info
    environment:
      - QUANT_ENV=development
      - DATABASE_URL=postgresql://postgres:password@db:5432/quant_framework
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - .:/app
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - quant-network
    restart: unless-stopped

  # Celery Flower监控
  flower:
    build:
      context: .
      target: development
    container_name: quant-framework-flower
    command: poetry run celery -A quant_framework.tasks.celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      - redis
    networks:
      - quant-network
    restart: unless-stopped

  # PostgreSQL数据库
  db:
    image: postgres:15-alpine
    container_name: quant-framework-db
    environment:
      - POSTGRES_DB=quant_framework
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - quant-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis缓存和消息队列
  redis:
    image: redis:7-alpine
    container_name: quant-framework-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - quant-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: quant-framework-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
      - ./frontend/build:/usr/share/nginx/html
    depends_on:
      - app
    networks:
      - quant-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端应用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: quant-framework-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api/v1
      - REACT_APP_WS_URL=ws://localhost:8000/ws
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - quant-network
    restart: unless-stopped

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: quant-framework-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - quant-network
    restart: unless-stopped

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: quant-framework-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - quant-network
    restart: unless-stopped

# 网络配置
networks:
  quant-network:
    driver: bridge

# 数据卷
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local