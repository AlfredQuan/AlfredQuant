#!/usr/bin/env python3\n\"\"\"\n量化投资研究框架 - 快速启动脚本\n\"\"\"\n\nimport os\nimport sys\nimport subprocess\nimport time\nfrom pathlib import Path\n\ndef print_banner():\n    \"\"\"打印启动横幅\"\"\"\n    banner = \"\"\"\n╔══════════════════════════════════════════════════════════════╗\n║                量化投资研究框架                                ║\n║            Quantitative Investment Research Framework        ║\n║                                                              ║\n║  🚀 快速启动脚本 - Quick Start Script                        ║\n╚══════════════════════════════════════════════════════════════╝\n\"\"\"\n    print(banner)\n\ndef check_prerequisites():\n    \"\"\"检查前置条件\"\"\"\n    print(\"\\n🔍 检查前置条件...\")\n    \n    # 检查Docker\n    try:\n        result = subprocess.run(['docker', '--version'], capture_output=True, text=True)\n        if result.returncode == 0:\n            print(\"  ✅ Docker 已安装\")\n        else:\n            print(\"  ❌ Docker 未安装或不可用\")\n            return False\n    except FileNotFoundError:\n        print(\"  ❌ Docker 未安装\")\n        return False\n    \n    # 检查Docker Compose\n    try:\n        result = subprocess.run(['docker-compose', '--version'], capture_output=True, text=True)\n        if result.returncode == 0:\n            print(\"  ✅ Docker Compose 已安装\")\n        else:\n            print(\"  ❌ Docker Compose 未安装或不可用\")\n            return False\n    except FileNotFoundError:\n        print(\"  ❌ Docker Compose 未安装\")\n        return False\n    \n    # 检查端口占用\n    ports_to_check = [3000, 8000, 5432, 6379]\n    for port in ports_to_check:\n        if is_port_in_use(port):\n            print(f\"  ⚠️  端口 {port} 已被占用，可能会导致冲突\")\n        else:\n            print(f\"  ✅ 端口 {port} 可用\")\n    \n    return True\n\ndef is_port_in_use(port):\n    \"\"\"检查端口是否被占用\"\"\"\n    import socket\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n        return s.connect_ex(('localhost', port)) == 0\n\ndef setup_environment():\n    \"\"\"设置环境\"\"\"\n    print(\"\\n⚙️  设置环境配置...\")\n    \n    # 检查环境配置文件\n    env_file = Path('.env')\n    if not env_file.exists():\n        print(\"  📝 创建环境配置文件...\")\n        # 复制示例配置\n        if Path('.env.example').exists():\n            subprocess.run(['cp', '.env.example', '.env'])\n            print(\"  ✅ 环境配置文件已创建\")\n        else:\n            # 创建基本配置\n            with open('.env', 'w') as f:\n                f.write(\"\"\"\n# 量化投资研究框架环境配置\nENVIRONMENT=development\nDEBUG=true\n\n# 数据库配置\nDATABASE_URL=postgresql://postgres:password@postgres:5432/quant_framework_dev\n\n# Redis配置\nREDIS_URL=redis://redis:6379/0\n\n# 安全配置\nSECRET_KEY=dev-secret-key-change-in-production\nACCESS_TOKEN_EXPIRE_MINUTES=1440\n\n# 数据源配置（请替换为真实的token）\nTUSHARE_TOKEN=your-tushare-token-here\n\n# 日志配置\nLOG_LEVEL=INFO\nLOG_FILE=logs/app.log\n\"\"\")\n            print(\"  ✅ 基本环境配置文件已创建\")\n    else:\n        print(\"  ✅ 环境配置文件已存在\")\n    \n    # 创建必要的目录\n    directories = ['logs', 'data/cache', 'test_reports', 'validation_reports']\n    for directory in directories:\n        Path(directory).mkdir(parents=True, exist_ok=True)\n    print(\"  ✅ 必要目录已创建\")\n\ndef start_services():\n    \"\"\"启动服务\"\"\"\n    print(\"\\n🚀 启动服务...\")\n    \n    try:\n        # 启动开发环境\n        print(\"  📦 启动Docker容器...\")\n        result = subprocess.run(\n            ['docker-compose', '-f', 'docker-compose.dev.yml', 'up', '-d'],\n            capture_output=True,\n            text=True\n        )\n        \n        if result.returncode == 0:\n            print(\"  ✅ Docker容器启动成功\")\n        else:\n            print(f\"  ❌ Docker容器启动失败: {result.stderr}\")\n            return False\n        \n        # 等待服务就绪\n        print(\"  ⏳ 等待服务就绪...\")\n        time.sleep(30)\n        \n        # 检查服务状态\n        result = subprocess.run(\n            ['docker-compose', '-f', 'docker-compose.dev.yml', 'ps'],\n            capture_output=True,\n            text=True\n        )\n        \n        if 'Up' in result.stdout:\n            print(\"  ✅ 服务运行正常\")\n        else:\n            print(\"  ⚠️  部分服务可能未正常启动\")\n        \n        return True\n        \n    except Exception as e:\n        print(f\"  ❌ 启动服务时出错: {e}\")\n        return False\n\ndef initialize_database():\n    \"\"\"初始化数据库\"\"\"\n    print(\"\\n🗄️  初始化数据库...\")\n    \n    try:\n        # 等待数据库就绪\n        print(\"  ⏳ 等待数据库就绪...\")\n        time.sleep(10)\n        \n        # 运行数据库迁移\n        print(\"  📊 运行数据库迁移...\")\n        result = subprocess.run(\n            ['docker-compose', '-f', 'docker-compose.dev.yml', 'exec', '-T', 'backend', \n             'python', 'scripts/migrate.py', 'upgrade'],\n            capture_output=True,\n            text=True\n        )\n        \n        if result.returncode == 0:\n            print(\"  ✅ 数据库迁移完成\")\n        else:\n            print(f\"  ⚠️  数据库迁移可能失败: {result.stderr}\")\n        \n        # 初始化基础数据\n        print(\"  📝 初始化基础数据...\")\n        result = subprocess.run(\n            ['docker-compose', '-f', 'docker-compose.dev.yml', 'exec', '-T', 'backend',\n             'python', 'scripts/init_data.py', 'init'],\n            capture_output=True,\n            text=True\n        )\n        \n        if result.returncode == 0:\n            print(\"  ✅ 基础数据初始化完成\")\n        else:\n            print(f\"  ⚠️  基础数据初始化可能失败: {result.stderr}\")\n        \n        return True\n        \n    except Exception as e:\n        print(f\"  ❌ 数据库初始化时出错: {e}\")\n        return False\n\ndef run_health_check():\n    \"\"\"运行健康检查\"\"\"\n    print(\"\\n🏥 运行健康检查...\")\n    \n    # 检查各个服务的健康状态\n    services = [\n        ('前端服务', 'http://localhost:3000'),\n        ('后端API', 'http://localhost:8000/health'),\n        ('API文档', 'http://localhost:8000/docs')\n    ]\n    \n    all_healthy = True\n    \n    for service_name, url in services:\n        try:\n            import urllib.request\n            urllib.request.urlopen(url, timeout=5)\n            print(f\"  ✅ {service_name}: {url}\")\n        except Exception:\n            print(f\"  ❌ {service_name}: {url} (不可访问)\")\n            all_healthy = False\n    \n    return all_healthy\n\ndef print_success_info():\n    \"\"\"打印成功信息\"\"\"\n    success_message = \"\"\"\n🎉 量化投资研究框架启动成功！\n\n📱 访问地址:\n  • 前端界面: http://localhost:3000\n  • 后端API:  http://localhost:8000\n  • API文档:  http://localhost:8000/docs\n  • 管理后台: http://localhost:8000/admin\n\n👤 默认账户:\n  • 用户名: admin\n  • 密码: admin123\n\n📚 快速开始:\n  1. 访问前端界面进行用户注册\n  2. 创建你的第一个量化策略\n  3. 运行回测验证策略效果\n  4. 查看详细的回测报告\n\n🛠️  常用命令:\n  • 查看服务状态: docker-compose -f docker-compose.dev.yml ps\n  • 查看日志: docker-compose -f docker-compose.dev.yml logs -f\n  • 停止服务: docker-compose -f docker-compose.dev.yml down\n  • 重启服务: docker-compose -f docker-compose.dev.yml restart\n\n📖 更多信息:\n  • 用户手册: docs/user_guide.md\n  • 开发指南: docs/developer_guide.md\n  • API文档: docs/api_documentation.md\n\n🆘 需要帮助?\n  • GitHub Issues: https://github.com/your-org/quant-framework/issues\n  • 技术支持: support@quantframework.com\n\"\"\"\n    print(success_message)\n\ndef print_failure_info():\n    \"\"\"打印失败信息\"\"\"\n    failure_message = \"\"\"\n❌ 启动过程中遇到问题\n\n🔧 故障排除:\n  1. 检查Docker是否正常运行\n  2. 确保所需端口未被占用 (3000, 8000, 5432, 6379)\n  3. 检查磁盘空间是否充足\n  4. 查看详细错误日志\n\n📋 手动启动步骤:\n  1. docker-compose -f docker-compose.dev.yml up -d\n  2. 等待服务启动 (约30秒)\n  3. docker-compose -f docker-compose.dev.yml exec backend python scripts/migrate.py upgrade\n  4. docker-compose -f docker-compose.dev.yml exec backend python scripts/init_data.py init\n\n🆘 获取帮助:\n  • 查看日志: docker-compose -f docker-compose.dev.yml logs\n  • 检查状态: docker-compose -f docker-compose.dev.yml ps\n  • 重新启动: docker-compose -f docker-compose.dev.yml restart\n\"\"\"\n    print(failure_message)\n\ndef main():\n    \"\"\"主函数\"\"\"\n    print_banner()\n    \n    # 检查前置条件\n    if not check_prerequisites():\n        print(\"\\n❌ 前置条件检查失败，请安装必要的软件后重试\")\n        sys.exit(1)\n    \n    # 设置环境\n    setup_environment()\n    \n    # 启动服务\n    if not start_services():\n        print_failure_info()\n        sys.exit(1)\n    \n    # 初始化数据库\n    if not initialize_database():\n        print(\"\\n⚠️  数据库初始化可能失败，但服务仍可能正常运行\")\n    \n    # 运行健康检查\n    if run_health_check():\n        print_success_info()\n    else:\n        print(\"\\n⚠️  部分服务可能未正常启动，请检查服务状态\")\n        print_failure_info()\n\nif __name__ == \"__main__\":\n    try:\n        main()\n    except KeyboardInterrupt:\n        print(\"\\n\\n⏹️  启动过程被用户中断\")\n        sys.exit(130)\n    except Exception as e:\n        print(f\"\\n\\n💥 启动过程中发生未预期的错误: {e}\")\n        sys.exit(1)\n