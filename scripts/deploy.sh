#!/bin/bash\n\n# 部署脚本\n# 用法: ./scripts/deploy.sh [environment] [version]\n# 示例: ./scripts/deploy.sh prod v1.0.0\n\nset -e\n\n# 颜色定义\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# 日志函数\nlog_info() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nlog_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nlog_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nlog_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\n# 检查参数\nif [ $# -lt 1 ]; then\n    log_error \"Usage: $0 <environment> [version]\"\n    log_error \"Environments: dev, test, prod\"\n    log_error \"Example: $0 prod v1.0.0\"\n    exit 1\nfi\n\nENVIRONMENT=$1\nVERSION=${2:-\"latest\"}\n\n# 验证环境\ncase $ENVIRONMENT in\n    dev|test|prod)\n        log_info \"Deploying to $ENVIRONMENT environment\"\n        ;;\n    *)\n        log_error \"Invalid environment: $ENVIRONMENT\"\n        log_error \"Valid environments: dev, test, prod\"\n        exit 1\n        ;;\nesac\n\n# 设置变量\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nPROJECT_ROOT=\"$(dirname \"$SCRIPT_DIR\")\"\nDOCKER_REGISTRY=\"ghcr.io/your-org\"\nIMAGE_NAME=\"quant-framework\"\nFRONTEND_IMAGE_NAME=\"quant-framework-frontend\"\nKUBECONFIG_FILE=\"$HOME/.kube/config-$ENVIRONMENT\"\n\n# 检查必要工具\ncheck_tools() {\n    log_info \"Checking required tools...\"\n    \n    local tools=(\"docker\" \"kubectl\" \"helm\")\n    for tool in \"${tools[@]}\"; do\n        if ! command -v \"$tool\" &> /dev/null; then\n            log_error \"$tool is not installed or not in PATH\"\n            exit 1\n        fi\n    done\n    \n    log_success \"All required tools are available\"\n}\n\n# 检查Kubernetes连接\ncheck_k8s_connection() {\n    log_info \"Checking Kubernetes connection...\"\n    \n    if [ ! -f \"$KUBECONFIG_FILE\" ]; then\n        log_error \"Kubeconfig file not found: $KUBECONFIG_FILE\"\n        exit 1\n    fi\n    \n    export KUBECONFIG=\"$KUBECONFIG_FILE\"\n    \n    if ! kubectl cluster-info &> /dev/null; then\n        log_error \"Cannot connect to Kubernetes cluster\"\n        exit 1\n    fi\n    \n    log_success \"Kubernetes connection successful\"\n}\n\n# 构建和推送镜像\nbuild_and_push_images() {\n    if [ \"$ENVIRONMENT\" = \"dev\" ]; then\n        log_info \"Skipping image build for dev environment\"\n        return\n    fi\n    \n    log_info \"Building and pushing Docker images...\"\n    \n    cd \"$PROJECT_ROOT\"\n    \n    # 构建后端镜像\n    log_info \"Building backend image...\"\n    docker build -t \"$DOCKER_REGISTRY/$IMAGE_NAME:$VERSION\" .\n    docker push \"$DOCKER_REGISTRY/$IMAGE_NAME:$VERSION\"\n    \n    # 构建前端镜像\n    log_info \"Building frontend image...\"\n    docker build -t \"$DOCKER_REGISTRY/$FRONTEND_IMAGE_NAME:$VERSION\" ./frontend\n    docker push \"$DOCKER_REGISTRY/$FRONTEND_IMAGE_NAME:$VERSION\"\n    \n    log_success \"Images built and pushed successfully\"\n}\n\n# 更新Kubernetes配置\nupdate_k8s_manifests() {\n    log_info \"Updating Kubernetes manifests...\"\n    \n    cd \"$PROJECT_ROOT\"\n    \n    # 创建临时目录\n    TEMP_DIR=$(mktemp -d)\n    cp -r k8s/* \"$TEMP_DIR/\"\n    \n    # 根据环境设置命名空间\n    local namespace\n    case $ENVIRONMENT in\n        prod)\n            namespace=\"quant-framework\"\n            ;;\n        test)\n            namespace=\"quant-framework-test\"\n            ;;\n        dev)\n            namespace=\"quant-framework-dev\"\n            ;;\n    esac\n    \n    # 更新镜像标签\n    if [ \"$ENVIRONMENT\" != \"dev\" ]; then\n        sed -i \"s|your-registry.com/quant-framework:latest|$DOCKER_REGISTRY/$IMAGE_NAME:$VERSION|g\" \"$TEMP_DIR/deployment.yaml\"\n        sed -i \"s|your-registry.com/quant-framework-frontend:latest|$DOCKER_REGISTRY/$FRONTEND_IMAGE_NAME:$VERSION|g\" \"$TEMP_DIR/deployment.yaml\"\n    fi\n    \n    # 更新命名空间\n    find \"$TEMP_DIR\" -name \"*.yaml\" -exec sed -i \"s/namespace: quant-framework$/namespace: $namespace/g\" {} \\;\n    \n    echo \"$TEMP_DIR\"\n}\n\n# 部署到Kubernetes\ndeploy_to_k8s() {\n    log_info \"Deploying to Kubernetes...\"\n    \n    local manifest_dir\n    manifest_dir=$(update_k8s_manifests)\n    \n    export KUBECONFIG=\"$KUBECONFIG_FILE\"\n    \n    # 应用配置\n    kubectl apply -f \"$manifest_dir/namespace.yaml\"\n    kubectl apply -f \"$manifest_dir/configmap.yaml\"\n    kubectl apply -f \"$manifest_dir/secrets.yaml\"\n    kubectl apply -f \"$manifest_dir/pvc.yaml\"\n    kubectl apply -f \"$manifest_dir/deployment.yaml\"\n    kubectl apply -f \"$manifest_dir/service.yaml\"\n    kubectl apply -f \"$manifest_dir/ingress.yaml\"\n    kubectl apply -f \"$manifest_dir/hpa.yaml\"\n    \n    # 清理临时目录\n    rm -rf \"$manifest_dir\"\n    \n    log_success \"Kubernetes manifests applied successfully\"\n}\n\n# 等待部署完成\nwait_for_deployment() {\n    log_info \"Waiting for deployment to complete...\"\n    \n    local namespace\n    case $ENVIRONMENT in\n        prod)\n            namespace=\"quant-framework\"\n            ;;\n        test)\n            namespace=\"quant-framework-test\"\n            ;;\n        dev)\n            namespace=\"quant-framework-dev\"\n            ;;\n    esac\n    \n    export KUBECONFIG=\"$KUBECONFIG_FILE\"\n    \n    # 等待后端部署\n    if ! kubectl rollout status deployment/quant-framework-backend -n \"$namespace\" --timeout=600s; then\n        log_error \"Backend deployment failed or timed out\"\n        exit 1\n    fi\n    \n    # 等待前端部署\n    if ! kubectl rollout status deployment/quant-framework-frontend -n \"$namespace\" --timeout=600s; then\n        log_error \"Frontend deployment failed or timed out\"\n        exit 1\n    fi\n    \n    # 等待工作进程部署\n    if ! kubectl rollout status deployment/quant-framework-worker -n \"$namespace\" --timeout=600s; then\n        log_error \"Worker deployment failed or timed out\"\n        exit 1\n    fi\n    \n    log_success \"All deployments completed successfully\"\n}\n\n# 运行健康检查\nrun_health_check() {\n    log_info \"Running health checks...\"\n    \n    local health_url\n    case $ENVIRONMENT in\n        prod)\n            health_url=\"https://quant-framework.com\"\n            ;;\n        test)\n            health_url=\"https://test.quant-framework.com\"\n            ;;\n        dev)\n            health_url=\"http://localhost:8000\"\n            ;;\n    esac\n    \n    # 等待服务就绪\n    sleep 30\n    \n    # 基本健康检查\n    if curl -f \"$health_url/health\" > /dev/null 2>&1; then\n        log_success \"Health check passed\"\n    else\n        log_error \"Health check failed\"\n        exit 1\n    fi\n    \n    # API健康检查\n    if curl -f \"$health_url/api/v1/health\" > /dev/null 2>&1; then\n        log_success \"API health check passed\"\n    else\n        log_error \"API health check failed\"\n        exit 1\n    fi\n}\n\n# 运行数据库迁移\nrun_migrations() {\n    if [ \"$ENVIRONMENT\" = \"dev\" ]; then\n        log_info \"Skipping migrations for dev environment\"\n        return\n    fi\n    \n    log_info \"Running database migrations...\"\n    \n    local namespace\n    case $ENVIRONMENT in\n        prod)\n            namespace=\"quant-framework\"\n            ;;\n        test)\n            namespace=\"quant-framework-test\"\n            ;;\n    esac\n    \n    export KUBECONFIG=\"$KUBECONFIG_FILE\"\n    \n    # 获取后端Pod\n    local pod_name\n    pod_name=$(kubectl get pods -n \"$namespace\" -l app=quant-framework,component=backend -o jsonpath='{.items[0].metadata.name}')\n    \n    if [ -z \"$pod_name\" ]; then\n        log_error \"No backend pod found\"\n        exit 1\n    fi\n    \n    # 运行迁移\n    if kubectl exec -n \"$namespace\" \"$pod_name\" -- python scripts/migrate.py upgrade; then\n        log_success \"Database migrations completed\"\n    else\n        log_error \"Database migrations failed\"\n        exit 1\n    fi\n}\n\n# 发送通知\nsend_notification() {\n    local status=$1\n    local message=$2\n    \n    if [ -n \"$SLACK_WEBHOOK_URL\" ]; then\n        local emoji\n        if [ \"$status\" = \"success\" ]; then\n            emoji=\":white_check_mark:\"\n        else\n            emoji=\":x:\"\n        fi\n        \n        curl -X POST -H 'Content-type: application/json' \\\n            --data \"{\\\"text\\\":\\\"$emoji Deployment to $ENVIRONMENT: $message\\\"}\" \\\n            \"$SLACK_WEBHOOK_URL\" > /dev/null 2>&1\n    fi\n}\n\n# 主函数\nmain() {\n    log_info \"Starting deployment to $ENVIRONMENT environment with version $VERSION\"\n    \n    # 检查工具\n    check_tools\n    \n    # 检查Kubernetes连接\n    if [ \"$ENVIRONMENT\" != \"dev\" ]; then\n        check_k8s_connection\n    fi\n    \n    # 构建和推送镜像\n    build_and_push_images\n    \n    # 部署到Kubernetes\n    if [ \"$ENVIRONMENT\" != \"dev\" ]; then\n        deploy_to_k8s\n        wait_for_deployment\n        run_migrations\n    else\n        log_info \"Starting dev environment with docker-compose...\"\n        cd \"$PROJECT_ROOT\"\n        docker-compose -f docker-compose.dev.yml up -d\n    fi\n    \n    # 运行健康检查\n    run_health_check\n    \n    log_success \"Deployment to $ENVIRONMENT completed successfully!\"\n    \n    # 发送成功通知\n    send_notification \"success\" \"Deployment completed successfully\"\n    \n    # 显示访问信息\n    case $ENVIRONMENT in\n        prod)\n            log_info \"Application is available at: https://quant-framework.com\"\n            log_info \"API is available at: https://api.quant-framework.com\"\n            ;;\n        test)\n            log_info \"Application is available at: https://test.quant-framework.com\"\n            ;;\n        dev)\n            log_info \"Application is available at: http://localhost:3000\"\n            log_info \"API is available at: http://localhost:8000\"\n            ;;\n    esac\n}\n\n# 错误处理\ntrap 'log_error \"Deployment failed!\"; send_notification \"failure\" \"Deployment failed\"; exit 1' ERR\n\n# 运行主函数\nmain\n