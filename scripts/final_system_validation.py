#!/usr/bin/env python3\n\"\"\"\n最终系统验证脚本\n对整个量化投资研究框架进行最终验证\n\"\"\"\n\nimport asyncio\nimport sys\nimport json\nimport time\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typing import Dict, List, Any, Optional\n\n# 添加项目根目录到Python路径\nproject_root = Path(__file__).parent.parent\nsys.path.insert(0, str(project_root))\n\nfrom quant_framework.monitoring.logger import get_logger\n\nlogger = get_logger(__name__)\n\n\nclass FinalSystemValidation:\n    \"\"\"最终系统验证\"\"\"\n    \n    def __init__(self):\n        self.validation_results = {\n            'start_time': None,\n            'end_time': None,\n            'validations': {},\n            'summary': {\n                'total': 0,\n                'passed': 0,\n                'failed': 0,\n                'critical_issues': [],\n                'warnings': []\n            }\n        }\n    \n    async def run_final_validation(self) -> Dict[str, Any]:\n        \"\"\"运行最终系统验证\"\"\"\n        logger.info(\"开始最终系统验证\")\n        self.validation_results['start_time'] = datetime.now().isoformat()\n        \n        validations = [\n            ('architecture_validation', '系统架构验证', self.validate_architecture),\n            ('functionality_validation', '功能完整性验证', self.validate_functionality),\n            ('performance_validation', '性能指标验证', self.validate_performance),\n            ('security_validation', '安全性验证', self.validate_security),\n            ('compatibility_validation', '兼容性验证', self.validate_compatibility),\n            ('reliability_validation', '可靠性验证', self.validate_reliability),\n            ('scalability_validation', '可扩展性验证', self.validate_scalability),\n            ('maintainability_validation', '可维护性验证', self.validate_maintainability),\n            ('documentation_validation', '文档完整性验证', self.validate_documentation),\n            ('deployment_validation', '部署就绪性验证', self.validate_deployment_readiness)\n        ]\n        \n        for validation_id, validation_name, validation_func in validations:\n            logger.info(f\"执行验证: {validation_name}\")\n            \n            try:\n                start_time = time.time()\n                result = await validation_func()\n                duration = time.time() - start_time\n                \n                self.validation_results['validations'][validation_id] = {\n                    'name': validation_name,\n                    'passed': result['passed'],\n                    'score': result.get('score', 0),\n                    'issues': result.get('issues', []),\n                    'warnings': result.get('warnings', []),\n                    'recommendations': result.get('recommendations', []),\n                    'duration': duration,\n                    'timestamp': datetime.now().isoformat()\n                }\n                \n                self.validation_results['summary']['total'] += 1\n                \n                if result['passed']:\n                    self.validation_results['summary']['passed'] += 1\n                    logger.info(f\"✅ {validation_name} - 通过 (评分: {result.get('score', 'N/A')})\")\n                else:\n                    self.validation_results['summary']['failed'] += 1\n                    logger.error(f\"❌ {validation_name} - 失败\")\n                    \n                    # 收集关键问题\n                    critical_issues = [issue for issue in result.get('issues', []) if issue.get('severity') == 'critical']\n                    self.validation_results['summary']['critical_issues'].extend(critical_issues)\n                \n                # 收集警告\n                self.validation_results['summary']['warnings'].extend(result.get('warnings', []))\n                \n            except Exception as e:\n                logger.error(f\"💥 {validation_name} - 验证出错: {e}\")\n                self.validation_results['validations'][validation_id] = {\n                    'name': validation_name,\n                    'passed': False,\n                    'error': str(e),\n                    'timestamp': datetime.now().isoformat()\n                }\n                self.validation_results['summary']['total'] += 1\n                self.validation_results['summary']['failed'] += 1\n        \n        self.validation_results['end_time'] = datetime.now().isoformat()\n        \n        # 生成最终验证报告\n        await self.generate_final_report()\n        \n        return self.validation_results\n    \n    async def validate_architecture(self) -> Dict[str, Any]:\n        \"\"\"验证系统架构\"\"\"\n        issues = []\n        warnings = []\n        score = 0\n        \n        # 检查核心模块是否存在\n        core_modules = [\n            'quant_framework/core',\n            'quant_framework/data',\n            'quant_framework/services',\n            'quant_framework/backtest',\n            'quant_framework/trading',\n            'quant_framework/jqdata',\n            'quant_framework/performance',\n            'quant_framework/monitoring'\n        ]\n        \n        existing_modules = 0\n        for module in core_modules:\n            if (project_root / module).exists():\n                existing_modules += 1\n            else:\n                issues.append({\n                    'severity': 'critical',\n                    'message': f'核心模块缺失: {module}'\n                })\n        \n        score = (existing_modules / len(core_modules)) * 100\n        \n        return {\n            'passed': existing_modules == len(core_modules),\n            'score': score,\n            'issues': issues,\n            'warnings': warnings\n        }\n    \n    async def validate_functionality(self) -> Dict[str, Any]:\n        \"\"\"验证功能完整性\"\"\"\n        issues = []\n        warnings = []\n        \n        # 检查关键功能模块\n        key_functions = [\n            ('用户管理', 'quant_framework/services/user_service.py'),\n            ('策略管理', 'quant_framework/services/strategy_service.py'),\n            ('回测服务', 'quant_framework/services/backtest_service.py'),\n            ('数据服务', 'quant_framework/services/data_service.py'),\n            ('交易服务', 'quant_framework/services/trading_service.py'),\n            ('聚宽兼容', 'quant_framework/jqdata/api.py')\n        ]\n        \n        implemented_functions = 0\n        for func_name, file_path in key_functions:\n            if (project_root / file_path).exists():\n                implemented_functions += 1\n            else:\n                issues.append({\n                    'severity': 'high',\n                    'message': f'关键功能未实现: {func_name}'\n                })\n        \n        score = (implemented_functions / len(key_functions)) * 100\n        \n        return {\n            'passed': implemented_functions >= len(key_functions) * 0.9,  # 90%功能实现\n            'score': score,\n            'issues': issues,\n            'warnings': warnings\n        }\n    \n    async def validate_performance(self) -> Dict[str, Any]:\n        \"\"\"验证性能指标\"\"\"\n        issues = []\n        warnings = []\n        \n        # 检查性能优化模块\n        performance_modules = [\n            'quant_framework/performance/cache.py',\n            'quant_framework/performance/query_optimizer.py',\n            'quant_framework/performance/data_loader.py',\n            'quant_framework/performance/profiler.py'\n        ]\n        \n        implemented_modules = 0\n        for module in performance_modules:\n            if (project_root / module).exists():\n                implemented_modules += 1\n            else:\n                warnings.append(f'性能模块缺失: {module}')\n        \n        score = (implemented_modules / len(performance_modules)) * 100\n        \n        return {\n            'passed': implemented_modules >= len(performance_modules) * 0.8,\n            'score': score,\n            'issues': issues,\n            'warnings': warnings\n        }\n    \n    async def validate_security(self) -> Dict[str, Any]:\n        \"\"\"验证安全性\"\"\"\n        issues = []\n        warnings = []\n        \n        # 检查安全相关文件\n        security_files = [\n            'quant_framework/core/security.py',\n            'quant_framework/core/auth.py'\n        ]\n        \n        security_score = 0\n        for security_file in security_files:\n            if (project_root / security_file).exists():\n                security_score += 50\n            else:\n                warnings.append(f'安全模块缺失: {security_file}')\n        \n        return {\n            'passed': security_score >= 50,\n            'score': security_score,\n            'issues': issues,\n            'warnings': warnings\n        }\n    \n    async def validate_compatibility(self) -> Dict[str, Any]:\n        \"\"\"验证兼容性\"\"\"\n        issues = []\n        warnings = []\n        \n        # 检查聚宽兼容性模块\n        jq_modules = [\n            'quant_framework/jqdata/api.py',\n            'quant_framework/jqdata/context.py',\n            'quant_framework/jqdata/data.py'\n        ]\n        \n        compatibility_score = 0\n        for module in jq_modules:\n            if (project_root / module).exists():\n                compatibility_score += 33.33\n            else:\n                issues.append({\n                    'severity': 'high',\n                    'message': f'聚宽兼容模块缺失: {module}'\n                })\n        \n        return {\n            'passed': compatibility_score >= 90,\n            'score': compatibility_score,\n            'issues': issues,\n            'warnings': warnings\n        }\n    \n    async def validate_reliability(self) -> Dict[str, Any]:\n        \"\"\"验证可靠性\"\"\"\n        issues = []\n        warnings = []\n        \n        # 检查测试覆盖率\n        test_dirs = [\n            'tests/unit',\n            'tests/integration',\n            'tests/system',\n            'tests/performance'\n        ]\n        \n        test_coverage = 0\n        for test_dir in test_dirs:\n            if (project_root / test_dir).exists():\n                test_coverage += 25\n            else:\n                warnings.append(f'测试目录缺失: {test_dir}')\n        \n        return {\n            'passed': test_coverage >= 75,\n            'score': test_coverage,\n            'issues': issues,\n            'warnings': warnings\n        }\n    \n    async def validate_scalability(self) -> Dict[str, Any]:\n        \"\"\"验证可扩展性\"\"\"\n        issues = []\n        warnings = []\n        \n        # 检查容器化和部署配置\n        scalability_files = [\n            'Dockerfile',\n            'docker-compose.yml',\n            'k8s/deployment.yaml',\n            'k8s/service.yaml'\n        ]\n        \n        scalability_score = 0\n        for file_path in scalability_files:\n            if (project_root / file_path).exists():\n                scalability_score += 25\n            else:\n                warnings.append(f'可扩展性配置缺失: {file_path}')\n        \n        return {\n            'passed': scalability_score >= 75,\n            'score': scalability_score,\n            'issues': issues,\n            'warnings': warnings\n        }\n    \n    async def validate_maintainability(self) -> Dict[str, Any]:\n        \"\"\"验证可维护性\"\"\"\n        issues = []\n        warnings = []\n        \n        # 检查代码质量工具配置\n        quality_files = [\n            '.github/workflows/ci.yml',\n            'pyproject.toml',\n            'requirements-dev.txt'\n        ]\n        \n        maintainability_score = 0\n        for file_path in quality_files:\n            if (project_root / file_path).exists():\n                maintainability_score += 33.33\n            else:\n                warnings.append(f'代码质量配置缺失: {file_path}')\n        \n        return {\n            'passed': maintainability_score >= 66,\n            'score': maintainability_score,\n            'issues': issues,\n            'warnings': warnings\n        }\n    \n    async def validate_documentation(self) -> Dict[str, Any]:\n        \"\"\"验证文档完整性\"\"\"\n        issues = []\n        warnings = []\n        \n        # 检查文档文件\n        doc_files = [\n            'README.md',\n            'docs/user_guide.md',\n            'docs/developer_guide.md',\n            'docs/api_documentation.md',\n            'docs/deployment_guide.md'\n        ]\n        \n        doc_score = 0\n        for doc_file in doc_files:\n            if (project_root / doc_file).exists():\n                doc_score += 20\n            else:\n                warnings.append(f'文档缺失: {doc_file}')\n        \n        return {\n            'passed': doc_score >= 80,\n            'score': doc_score,\n            'issues': issues,\n            'warnings': warnings\n        }\n    \n    async def validate_deployment_readiness(self) -> Dict[str, Any]:\n        \"\"\"验证部署就绪性\"\"\"\n        issues = []\n        warnings = []\n        \n        # 检查部署相关文件\n        deployment_files = [\n            'scripts/deploy.sh',\n            'scripts/health_check.py',\n            'Makefile',\n            'docker-compose.prod.yml'\n        ]\n        \n        deployment_score = 0\n        for file_path in deployment_files:\n            if (project_root / file_path).exists():\n                deployment_score += 25\n            else:\n                issues.append({\n                    'severity': 'medium',\n                    'message': f'部署文件缺失: {file_path}'\n                })\n        \n        return {\n            'passed': deployment_score >= 75,\n            'score': deployment_score,\n            'issues': issues,\n            'warnings': warnings\n        }\n    \n    async def generate_final_report(self):\n        \"\"\"生成最终验证报告\"\"\"\n        report_dir = project_root / 'validation_reports'\n        report_dir.mkdir(exist_ok=True)\n        \n        # 生成JSON报告\n        json_report_path = report_dir / 'final_validation_report.json'\n        with open(json_report_path, 'w', encoding='utf-8') as f:\n            json.dump(self.validation_results, f, indent=2, ensure_ascii=False)\n        \n        logger.info(f\"最终验证报告已生成: {json_report_path}\")\n    \n    def print_final_summary(self):\n        \"\"\"打印最终验证摘要\"\"\"\n        summary = self.validation_results['summary']\n        total = summary['total']\n        passed = summary['passed']\n        failed = summary['failed']\n        success_rate = (passed / total * 100) if total > 0 else 0\n        \n        print(\"\\n\" + \"=\" * 100)\n        print(\"量化投资研究框架 - 最终系统验证报告\")\n        print(\"=\" * 100)\n        print(f\"验证时间: {self.validation_results['start_time']} - {self.validation_results['end_time']}\")\n        print(f\"总验证项: {total}\")\n        print(f\"通过验证: {passed}\")\n        print(f\"失败验证: {failed}\")\n        print(f\"通过率: {success_rate:.1f}%\")\n        \n        # 显示各项验证得分\n        print(\"\\n验证详情:\")\n        for validation_id, validation_data in self.validation_results['validations'].items():\n            status = \"✅\" if validation_data['passed'] else \"❌\"\n            score = validation_data.get('score', 'N/A')\n            print(f\"  {status} {validation_data['name']}: {score}\")\n        \n        # 显示关键问题\n        if summary['critical_issues']:\n            print(\"\\n🚨 关键问题:\")\n            for issue in summary['critical_issues']:\n                print(f\"  - {issue['message']}\")\n        \n        # 显示警告\n        if summary['warnings']:\n            print(\"\\n⚠️  警告 (前10项):\")\n            for warning in summary['warnings'][:10]:\n                print(f\"  - {warning}\")\n        \n        print(\"\\n\" + \"=\" * 100)\n        \n        # 最终判定\n        if success_rate >= 90 and not summary['critical_issues']:\n            print(\"🎉 系统验证通过！量化投资研究框架已准备好投入生产使用。\")\n            print(\"\\n系统特性:\")\n            print(\"  ✅ 完整的策略开发和回测功能\")\n            print(\"  ✅ 聚宽策略无缝迁移支持\")\n            print(\"  ✅ 高性能数据处理和缓存\")\n            print(\"  ✅ 实时交易信号生成\")\n            print(\"  ✅ 企业级安全和可扩展性\")\n            print(\"  ✅ 完善的监控和运维支持\")\n        elif success_rate >= 70:\n            print(\"⚠️  系统基本可用，但存在一些需要改进的地方。\")\n            print(\"建议在生产部署前解决关键问题和警告。\")\n        else:\n            print(\"❌ 系统验证失败，需要解决重大问题后重新验证。\")\n        \n        print(\"=\" * 100)\n\n\nasync def main():\n    \"\"\"主函数\"\"\"\n    validator = FinalSystemValidation()\n    \n    try:\n        results = await validator.run_final_validation()\n        validator.print_final_summary()\n        \n        # 根据验证结果设置退出码\n        success_rate = (results['summary']['passed'] / results['summary']['total'] * 100) if results['summary']['total'] > 0 else 0\n        has_critical_issues = len(results['summary']['critical_issues']) > 0\n        \n        if success_rate >= 90 and not has_critical_issues:\n            sys.exit(0)  # 验证通过\n        else:\n            sys.exit(1)  # 验证失败\n            \n    except Exception as e:\n        logger.error(f\"最终验证出错: {e}\")\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n