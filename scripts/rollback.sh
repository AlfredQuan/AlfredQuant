#!/bin/bash\n\n# 回滚脚本\n# 用法: ./scripts/rollback.sh [environment] [revision]\n# 示例: ./scripts/rollback.sh prod 2\n\nset -e\n\n# 颜色定义\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# 日志函数\nlog_info() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nlog_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nlog_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nlog_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\n# 检查参数\nif [ $# -lt 1 ]; then\n    log_error \"Usage: $0 <environment> [revision]\"\n    log_error \"Environments: test, prod\"\n    log_error \"Example: $0 prod 2\"\n    exit 1\nfi\n\nENVIRONMENT=$1\nREVISION=${2:-\"\"}\n\n# 验证环境\ncase $ENVIRONMENT in\n    test|prod)\n        log_info \"Rolling back $ENVIRONMENT environment\"\n        ;;\n    *)\n        log_error \"Invalid environment: $ENVIRONMENT\"\n        log_error \"Valid environments: test, prod\"\n        exit 1\n        ;;\nesac\n\n# 设置变量\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nPROJECT_ROOT=\"$(dirname \"$SCRIPT_DIR\")\"\nKUBECONFIG_FILE=\"$HOME/.kube/config-$ENVIRONMENT\"\n\n# 设置命名空间\ncase $ENVIRONMENT in\n    prod)\n        NAMESPACE=\"quant-framework\"\n        ;;\n    test)\n        NAMESPACE=\"quant-framework-test\"\n        ;;\nesac\n\n# 检查Kubernetes连接\ncheck_k8s_connection() {\n    log_info \"Checking Kubernetes connection...\"\n    \n    if [ ! -f \"$KUBECONFIG_FILE\" ]; then\n        log_error \"Kubeconfig file not found: $KUBECONFIG_FILE\"\n        exit 1\n    fi\n    \n    export KUBECONFIG=\"$KUBECONFIG_FILE\"\n    \n    if ! kubectl cluster-info &> /dev/null; then\n        log_error \"Cannot connect to Kubernetes cluster\"\n        exit 1\n    fi\n    \n    log_success \"Kubernetes connection successful\"\n}\n\n# 显示部署历史\nshow_rollout_history() {\n    log_info \"Showing deployment history...\"\n    \n    export KUBECONFIG=\"$KUBECONFIG_FILE\"\n    \n    echo \"Backend deployment history:\"\n    kubectl rollout history deployment/quant-framework-backend -n \"$NAMESPACE\"\n    \n    echo \"\\nFrontend deployment history:\"\n    kubectl rollout history deployment/quant-framework-frontend -n \"$NAMESPACE\"\n    \n    echo \"\\nWorker deployment history:\"\n    kubectl rollout history deployment/quant-framework-worker -n \"$NAMESPACE\"\n}\n\n# 确认回滚\nconfirm_rollback() {\n    if [ -n \"$REVISION\" ]; then\n        log_warning \"You are about to rollback to revision $REVISION in $ENVIRONMENT environment\"\n    else\n        log_warning \"You are about to rollback to the previous revision in $ENVIRONMENT environment\"\n    fi\n    \n    echo -n \"Are you sure you want to continue? (yes/no): \"\n    read -r confirmation\n    \n    if [ \"$confirmation\" != \"yes\" ]; then\n        log_info \"Rollback cancelled\"\n        exit 0\n    fi\n}\n\n# 执行回滚\nperform_rollback() {\n    log_info \"Performing rollback...\"\n    \n    export KUBECONFIG=\"$KUBECONFIG_FILE\"\n    \n    local rollback_args=\"\"\n    if [ -n \"$REVISION\" ]; then\n        rollback_args=\"--to-revision=$REVISION\"\n    fi\n    \n    # 回滚后端\n    log_info \"Rolling back backend deployment...\"\n    kubectl rollout undo deployment/quant-framework-backend -n \"$NAMESPACE\" $rollback_args\n    \n    # 回滚前端\n    log_info \"Rolling back frontend deployment...\"\n    kubectl rollout undo deployment/quant-framework-frontend -n \"$NAMESPACE\" $rollback_args\n    \n    # 回滚工作进程\n    log_info \"Rolling back worker deployment...\"\n    kubectl rollout undo deployment/quant-framework-worker -n \"$NAMESPACE\" $rollback_args\n    \n    log_success \"Rollback initiated for all deployments\"\n}\n\n# 等待回滚完成\nwait_for_rollback() {\n    log_info \"Waiting for rollback to complete...\"\n    \n    export KUBECONFIG=\"$KUBECONFIG_FILE\"\n    \n    # 等待后端回滚\n    if ! kubectl rollout status deployment/quant-framework-backend -n \"$NAMESPACE\" --timeout=600s; then\n        log_error \"Backend rollback failed or timed out\"\n        exit 1\n    fi\n    \n    # 等待前端回滚\n    if ! kubectl rollout status deployment/quant-framework-frontend -n \"$NAMESPACE\" --timeout=600s; then\n        log_error \"Frontend rollback failed or timed out\"\n        exit 1\n    fi\n    \n    # 等待工作进程回滚\n    if ! kubectl rollout status deployment/quant-framework-worker -n \"$NAMESPACE\" --timeout=600s; then\n        log_error \"Worker rollback failed or timed out\"\n        exit 1\n    fi\n    \n    log_success \"All rollbacks completed successfully\"\n}\n\n# 运行健康检查\nrun_health_check() {\n    log_info \"Running post-rollback health checks...\"\n    \n    local health_url\n    case $ENVIRONMENT in\n        prod)\n            health_url=\"https://quant-framework.com\"\n            ;;\n        test)\n            health_url=\"https://test.quant-framework.com\"\n            ;;\n    esac\n    \n    # 等待服务就绪\n    sleep 30\n    \n    # 基本健康检查\n    local max_attempts=10\n    local attempt=1\n    \n    while [ $attempt -le $max_attempts ]; do\n        if curl -f \"$health_url/health\" > /dev/null 2>&1; then\n            log_success \"Health check passed\"\n            break\n        else\n            log_warning \"Health check failed (attempt $attempt/$max_attempts)\"\n            if [ $attempt -eq $max_attempts ]; then\n                log_error \"Health check failed after $max_attempts attempts\"\n                return 1\n            fi\n            sleep 10\n            ((attempt++))\n        fi\n    done\n    \n    # API健康检查\n    if curl -f \"$health_url/api/v1/health\" > /dev/null 2>&1; then\n        log_success \"API health check passed\"\n    else\n        log_error \"API health check failed\"\n        return 1\n    fi\n}\n\n# 发送通知\nsend_notification() {\n    local status=$1\n    local message=$2\n    \n    if [ -n \"$SLACK_WEBHOOK_URL\" ]; then\n        local emoji\n        if [ \"$status\" = \"success\" ]; then\n            emoji=\":arrows_counterclockwise:\"\n        else\n            emoji=\":x:\"\n        fi\n        \n        curl -X POST -H 'Content-type: application/json' \\\n            --data \"{\\\"text\\\":\\\"$emoji Rollback in $ENVIRONMENT: $message\\\"}\" \\\n            \"$SLACK_WEBHOOK_URL\" > /dev/null 2>&1\n    fi\n}\n\n# 显示当前状态\nshow_current_status() {\n    log_info \"Current deployment status:\"\n    \n    export KUBECONFIG=\"$KUBECONFIG_FILE\"\n    \n    echo \"\\nPods status:\"\n    kubectl get pods -n \"$NAMESPACE\" -l app=quant-framework\n    \n    echo \"\\nDeployment status:\"\n    kubectl get deployments -n \"$NAMESPACE\" -l app=quant-framework\n    \n    echo \"\\nService status:\"\n    kubectl get services -n \"$NAMESPACE\" -l app=quant-framework\n}\n\n# 主函数\nmain() {\n    log_info \"Starting rollback process for $ENVIRONMENT environment\"\n    \n    # 检查Kubernetes连接\n    check_k8s_connection\n    \n    # 显示部署历史\n    show_rollout_history\n    \n    # 确认回滚\n    confirm_rollback\n    \n    # 执行回滚\n    perform_rollback\n    \n    # 等待回滚完成\n    wait_for_rollback\n    \n    # 运行健康检查\n    if run_health_check; then\n        log_success \"Rollback to $ENVIRONMENT completed successfully!\"\n        send_notification \"success\" \"Rollback completed successfully\"\n    else\n        log_error \"Rollback completed but health checks failed\"\n        send_notification \"failure\" \"Rollback completed but health checks failed\"\n        exit 1\n    fi\n    \n    # 显示当前状态\n    show_current_status\n    \n    # 显示访问信息\n    case $ENVIRONMENT in\n        prod)\n            log_info \"Application is available at: https://quant-framework.com\"\n            log_info \"API is available at: https://api.quant-framework.com\"\n            ;;\n        test)\n            log_info \"Application is available at: https://test.quant-framework.com\"\n            ;;\n    esac\n}\n\n# 错误处理\ntrap 'log_error \"Rollback failed!\"; send_notification \"failure\" \"Rollback failed\"; exit 1' ERR\n\n# 运行主函数\nmain\n