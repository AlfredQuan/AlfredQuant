#!/usr/bin/env python3\n\"\"\"\n系统集成和最终测试运行脚本\n\"\"\"\n\nimport asyncio\nimport sys\nimport os\nimport time\nimport subprocess\nimport json\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typing import Dict, List, Any, Optional\n\n# 添加项目根目录到Python路径\nproject_root = Path(__file__).parent.parent\nsys.path.insert(0, str(project_root))\n\nfrom quant_framework.monitoring.logger import get_logger\nfrom quant_framework.core.config import get_settings\n\nlogger = get_logger(__name__)\n\n\nclass SystemTestRunner:\n    \"\"\"系统测试运行器\"\"\"\n    \n    def __init__(self):\n        self.settings = get_settings()\n        self.test_results = {\n            'start_time': None,\n            'end_time': None,\n            'total_duration': 0,\n            'tests': {},\n            'summary': {\n                'total': 0,\n                'passed': 0,\n                'failed': 0,\n                'skipped': 0,\n                'errors': []\n            }\n        }\n    \n    async def run_all_tests(self) -> Dict[str, Any]:\n        \"\"\"运行所有系统测试\"\"\"\n        logger.info(\"开始系统集成和最终测试\")\n        self.test_results['start_time'] = datetime.now().isoformat()\n        \n        test_suites = [\n            ('unit_tests', '单元测试', self.run_unit_tests),\n            ('integration_tests', '集成测试', self.run_integration_tests),\n            ('system_integration', '系统集成测试', self.run_system_integration_tests),\n            ('jqdata_migration', '聚宽迁移测试', self.run_jqdata_migration_tests),\n            ('performance_tests', '性能测试', self.run_performance_tests),\n            ('stress_tests', '压力测试', self.run_stress_tests),\n            ('stability_tests', '稳定性测试', self.run_stability_tests),\n            ('security_tests', '安全测试', self.run_security_tests),\n            ('end_to_end_tests', '端到端测试', self.run_end_to_end_tests)\n        ]\n        \n        for test_id, test_name, test_func in test_suites:\n            logger.info(f\"开始执行: {test_name}\")\n            \n            try:\n                start_time = time.time()\n                result = await test_func()\n                duration = time.time() - start_time\n                \n                self.test_results['tests'][test_id] = {\n                    'name': test_name,\n                    'status': 'passed' if result['success'] else 'failed',\n                    'duration': duration,\n                    'details': result,\n                    'timestamp': datetime.now().isoformat()\n                }\n                \n                if result['success']:\n                    self.test_results['summary']['passed'] += 1\n                    logger.info(f\"✅ {test_name} 通过 ({duration:.2f}s)\")\n                else:\n                    self.test_results['summary']['failed'] += 1\n                    logger.error(f\"❌ {test_name} 失败 ({duration:.2f}s)\")\n                    self.test_results['summary']['errors'].extend(result.get('errors', []))\n                \n            except Exception as e:\n                self.test_results['tests'][test_id] = {\n                    'name': test_name,\n                    'status': 'error',\n                    'duration': 0,\n                    'error': str(e),\n                    'timestamp': datetime.now().isoformat()\n                }\n                \n                self.test_results['summary']['failed'] += 1\n                self.test_results['summary']['errors'].append(f\"{test_name}: {str(e)}\")\n                logger.error(f\"💥 {test_name} 出错: {e}\")\n            \n            self.test_results['summary']['total'] += 1\n        \n        self.test_results['end_time'] = datetime.now().isoformat()\n        self.test_results['total_duration'] = sum(\n            test['duration'] for test in self.test_results['tests'].values()\n        )\n        \n        # 生成测试报告\n        await self.generate_test_report()\n        \n        return self.test_results\n    \n    async def run_unit_tests(self) -> Dict[str, Any]:\n        \"\"\"运行单元测试\"\"\"\n        try:\n            result = subprocess.run([\n                'python', '-m', 'pytest',\n                'tests/unit/',\n                '-v',\n                '--tb=short',\n                '--json-report',\n                '--json-report-file=test_reports/unit_tests.json'\n            ], capture_output=True, text=True, cwd=project_root)\n            \n            return {\n                'success': result.returncode == 0,\n                'stdout': result.stdout,\n                'stderr': result.stderr,\n                'return_code': result.returncode\n            }\n        except Exception as e:\n            return {\n                'success': False,\n                'error': str(e)\n            }\n    \n    async def run_integration_tests(self) -> Dict[str, Any]:\n        \"\"\"运行集成测试\"\"\"\n        try:\n            result = subprocess.run([\n                'python', '-m', 'pytest',\n                'tests/integration/',\n                '-v',\n                '--tb=short',\n                '--json-report',\n                '--json-report-file=test_reports/integration_tests.json'\n            ], capture_output=True, text=True, cwd=project_root)\n            \n            return {\n                'success': result.returncode == 0,\n                'stdout': result.stdout,\n                'stderr': result.stderr,\n                'return_code': result.returncode\n            }\n        except Exception as e:\n            return {\n                'success': False,\n                'error': str(e)\n            }\n    \n    async def run_system_integration_tests(self) -> Dict[str, Any]:\n        \"\"\"运行系统集成测试\"\"\"\n        try:\n            result = subprocess.run([\n                'python', '-m', 'pytest',\n                'tests/system/test_system_integration.py',\n                '-v',\n                '--tb=short',\n                '--json-report',\n                '--json-report-file=test_reports/system_integration.json'\n            ], capture_output=True, text=True, cwd=project_root)\n            \n            return {\n                'success': result.returncode == 0,\n                'stdout': result.stdout,\n                'stderr': result.stderr,\n                'return_code': result.returncode\n            }\n        except Exception as e:\n            return {\n                'success': False,\n                'error': str(e)\n            }\n    \n    async def run_jqdata_migration_tests(self) -> Dict[str, Any]:\n        \"\"\"运行聚宽迁移测试\"\"\"\n        try:\n            result = subprocess.run([\n                'python', '-m', 'pytest',\n                'tests/system/test_jqdata_migration.py',\n                '-v',\n                '--tb=short',\n                '--json-report',\n                '--json-report-file=test_reports/jqdata_migration.json'\n            ], capture_output=True, text=True, cwd=project_root)\n            \n            return {\n                'success': result.returncode == 0,\n                'stdout': result.stdout,\n                'stderr': result.stderr,\n                'return_code': result.returncode\n            }\n        except Exception as e:\n            return {\n                'success': False,\n                'error': str(e)\n            }\n    \n    async def run_performance_tests(self) -> Dict[str, Any]:\n        \"\"\"运行性能测试\"\"\"\n        try:\n            result = subprocess.run([\n                'python', '-m', 'pytest',\n                'tests/performance/',\n                '-v',\n                '--tb=short',\n                '--json-report',\n                '--json-report-file=test_reports/performance_tests.json'\n            ], capture_output=True, text=True, cwd=project_root)\n            \n            return {\n                'success': result.returncode == 0,\n                'stdout': result.stdout,\n                'stderr': result.stderr,\n                'return_code': result.returncode\n            }\n        except Exception as e:\n            return {\n                'success': False,\n                'error': str(e)\n            }\n    \n    async def run_stress_tests(self) -> Dict[str, Any]:\n        \"\"\"运行压力测试\"\"\"\n        try:\n            result = subprocess.run([\n                'python', '-m', 'pytest',\n                'tests/system/test_stress_testing.py',\n                '-v',\n                '-m', 'stress',\n                '--tb=short',\n                '--json-report',\n                '--json-report-file=test_reports/stress_tests.json'\n            ], capture_output=True, text=True, cwd=project_root)\n            \n            return {\n                'success': result.returncode == 0,\n                'stdout': result.stdout,\n                'stderr': result.stderr,\n                'return_code': result.returncode\n            }\n        except Exception as e:\n            return {\n                'success': False,\n                'error': str(e)\n            }\n    \n    async def run_stability_tests(self) -> Dict[str, Any]:\n        \"\"\"运行稳定性测试\"\"\"\n        try:\n            # 稳定性测试通常需要较长时间，这里简化处理\n            result = subprocess.run([\n                'python', '-m', 'pytest',\n                'tests/system/test_stability.py',\n                '-v',\n                '--tb=short',\n                '--json-report',\n                '--json-report-file=test_reports/stability_tests.json'\n            ], capture_output=True, text=True, cwd=project_root)\n            \n            return {\n                'success': result.returncode == 0,\n                'stdout': result.stdout,\n                'stderr': result.stderr,\n                'return_code': result.returncode\n            }\n        except Exception as e:\n            return {\n                'success': False,\n                'error': str(e)\n            }\n    \n    async def run_security_tests(self) -> Dict[str, Any]:\n        \"\"\"运行安全测试\"\"\"\n        try:\n            # 运行bandit安全扫描\n            bandit_result = subprocess.run([\n                'bandit', '-r', 'quant_framework/',\n                '-f', 'json',\n                '-o', 'test_reports/security_bandit.json'\n            ], capture_output=True, text=True, cwd=project_root)\n            \n            # 运行safety依赖安全检查\n            safety_result = subprocess.run([\n                'safety', 'check',\n                '--json',\n                '--output', 'test_reports/security_safety.json'\n            ], capture_output=True, text=True, cwd=project_root)\n            \n            # 安全测试通过条件：没有高危漏洞\n            success = bandit_result.returncode in [0, 1] and safety_result.returncode == 0\n            \n            return {\n                'success': success,\n                'bandit': {\n                    'stdout': bandit_result.stdout,\n                    'stderr': bandit_result.stderr,\n                    'return_code': bandit_result.returncode\n                },\n                'safety': {\n                    'stdout': safety_result.stdout,\n                    'stderr': safety_result.stderr,\n                    'return_code': safety_result.returncode\n                }\n            }\n        except Exception as e:\n            return {\n                'success': False,\n                'error': str(e)\n            }\n    \n    async def run_end_to_end_tests(self) -> Dict[str, Any]:\n        \"\"\"运行端到端测试\"\"\"\n        try:\n            # 端到端测试：完整的策略创建、回测、结果分析流程\n            from tests.system.test_system_integration import TestSystemIntegration\n            \n            test_instance = TestSystemIntegration()\n            \n            # 运行关键的端到端测试\n            await test_instance.test_complete_strategy_lifecycle()\n            await test_instance.test_data_pipeline_integration()\n            await test_instance.test_jqdata_compatibility_integration()\n            \n            return {\n                'success': True,\n                'message': '端到端测试通过'\n            }\n        except Exception as e:\n            return {\n                'success': False,\n                'error': str(e)\n            }\n    \n    async def generate_test_report(self):\n        \"\"\"生成测试报告\"\"\"\n        # 确保报告目录存在\n        report_dir = project_root / 'test_reports'\n        report_dir.mkdir(exist_ok=True)\n        \n        # 生成JSON报告\n        json_report_path = report_dir / 'system_test_report.json'\n        with open(json_report_path, 'w', encoding='utf-8') as f:\n            json.dump(self.test_results, f, indent=2, ensure_ascii=False)\n        \n        # 生成HTML报告\n        html_report = self.generate_html_report()\n        html_report_path = report_dir / 'system_test_report.html'\n        with open(html_report_path, 'w', encoding='utf-8') as f:\n            f.write(html_report)\n        \n        logger.info(f\"测试报告已生成:\")\n        logger.info(f\"  - JSON报告: {json_report_path}\")\n        logger.info(f\"  - HTML报告: {html_report_path}\")\n    \n    def generate_html_report(self) -> str:\n        \"\"\"生成HTML测试报告\"\"\"\n        summary = self.test_results['summary']\n        success_rate = (summary['passed'] / summary['total'] * 100) if summary['total'] > 0 else 0\n        \n        html = f\"\"\"\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>量化投资研究框架 - 系统测试报告</title>\n    <style>\n        body {{ font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }}\n        .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}\n        .header {{ text-align: center; margin-bottom: 30px; }}\n        .summary {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; }}\n        .summary-card {{ background: #f8f9fa; padding: 20px; border-radius: 8px; text-align: center; }}\n        .summary-card h3 {{ margin: 0 0 10px 0; color: #333; }}\n        .summary-card .number {{ font-size: 2em; font-weight: bold; }}\n        .passed {{ color: #28a745; }}\n        .failed {{ color: #dc3545; }}\n        .total {{ color: #007bff; }}\n        .test-results {{ margin-top: 30px; }}\n        .test-item {{ background: white; border: 1px solid #ddd; border-radius: 8px; margin-bottom: 15px; overflow: hidden; }}\n        .test-header {{ padding: 15px; background: #f8f9fa; border-bottom: 1px solid #ddd; display: flex; justify-content: space-between; align-items: center; }}\n        .test-name {{ font-weight: bold; }}\n        .test-status {{ padding: 5px 10px; border-radius: 4px; color: white; font-size: 0.9em; }}\n        .status-passed {{ background: #28a745; }}\n        .status-failed {{ background: #dc3545; }}\n        .status-error {{ background: #6c757d; }}\n        .test-details {{ padding: 15px; display: none; }}\n        .test-details.show {{ display: block; }}\n        .progress-bar {{ width: 100%; height: 20px; background: #e9ecef; border-radius: 10px; overflow: hidden; margin: 20px 0; }}\n        .progress-fill {{ height: 100%; background: linear-gradient(90deg, #28a745, #20c997); transition: width 0.3s ease; }}\n        .errors {{ background: #f8d7da; border: 1px solid #f5c6cb; border-radius: 4px; padding: 15px; margin-top: 20px; }}\n        .errors h3 {{ color: #721c24; margin-top: 0; }}\n        .error-item {{ background: white; padding: 10px; margin: 5px 0; border-radius: 4px; font-family: monospace; font-size: 0.9em; }}\n    </style>\n    <script>\n        function toggleDetails(id) {{\n            const details = document.getElementById('details-' + id);\n            details.classList.toggle('show');\n        }}\n    </script>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>量化投资研究框架</h1>\n            <h2>系统测试报告</h2>\n            <p>生成时间: {self.test_results['end_time']}</p>\n        </div>\n        \n        <div class=\"summary\">\n            <div class=\"summary-card\">\n                <h3>总测试数</h3>\n                <div class=\"number total\">{summary['total']}</div>\n            </div>\n            <div class=\"summary-card\">\n                <h3>通过测试</h3>\n                <div class=\"number passed\">{summary['passed']}</div>\n            </div>\n            <div class=\"summary-card\">\n                <h3>失败测试</h3>\n                <div class=\"number failed\">{summary['failed']}</div>\n            </div>\n            <div class=\"summary-card\">\n                <h3>成功率</h3>\n                <div class=\"number total\">{success_rate:.1f}%</div>\n            </div>\n            <div class=\"summary-card\">\n                <h3>总耗时</h3>\n                <div class=\"number total\">{self.test_results['total_duration']:.1f}s</div>\n            </div>\n        </div>\n        \n        <div class=\"progress-bar\">\n            <div class=\"progress-fill\" style=\"width: {success_rate}%\"></div>\n        </div>\n        \n        <div class=\"test-results\">\n            <h3>测试详情</h3>\n\"\"\"\n        \n        for test_id, test_data in self.test_results['tests'].items():\n            status_class = f\"status-{test_data['status']}\"\n            html += f\"\"\"\n            <div class=\"test-item\">\n                <div class=\"test-header\" onclick=\"toggleDetails('{test_id}')\" style=\"cursor: pointer;\">\n                    <div class=\"test-name\">{test_data['name']}</div>\n                    <div>\n                        <span class=\"test-status {status_class}\">{test_data['status'].upper()}</span>\n                        <span style=\"margin-left: 10px; color: #666;\">{test_data['duration']:.2f}s</span>\n                    </div>\n                </div>\n                <div id=\"details-{test_id}\" class=\"test-details\">\n                    <p><strong>执行时间:</strong> {test_data['timestamp']}</p>\n                    <p><strong>耗时:</strong> {test_data['duration']:.2f} 秒</p>\n\"\"\"\n            \n            if 'error' in test_data:\n                html += f\"<p><strong>错误:</strong> <code>{test_data['error']}</code></p>\"\n            \n            if 'details' in test_data and test_data['details']:\n                html += \"<p><strong>详细信息:</strong></p><pre style='background: #f8f9fa; padding: 10px; border-radius: 4px; overflow-x: auto;'>\")\n                if isinstance(test_data['details'], dict):\n                    html += json.dumps(test_data['details'], indent=2, ensure_ascii=False)\n                else:\n                    html += str(test_data['details'])\n                html += \"</pre>\"\n            \n            html += \"</div></div>\"\n        \n        if summary['errors']:\n            html += \"\"\"\n        </div>\n        \n        <div class=\"errors\">\n            <h3>错误汇总</h3>\n\"\"\"\n            for error in summary['errors']:\n                html += f'<div class=\"error-item\">{error}</div>'\n            \n            html += \"</div>\"\n        \n        html += \"\"\"\n    </div>\n</body>\n</html>\n\"\"\"\n        \n        return html\n    \n    def print_summary(self):\n        \"\"\"打印测试摘要\"\"\"\n        summary = self.test_results['summary']\n        success_rate = (summary['passed'] / summary['total'] * 100) if summary['total'] > 0 else 0\n        \n        print(\"\\n\" + \"=\" * 80)\n        print(\"系统测试摘要\")\n        print(\"=\" * 80)\n        print(f\"总测试数: {summary['total']}\")\n        print(f\"通过测试: {summary['passed']}\")\n        print(f\"失败测试: {summary['failed']}\")\n        print(f\"成功率: {success_rate:.1f}%\")\n        print(f\"总耗时: {self.test_results['total_duration']:.1f}秒\")\n        \n        if summary['errors']:\n            print(\"\\n错误列表:\")\n            for i, error in enumerate(summary['errors'], 1):\n                print(f\"  {i}. {error}\")\n        \n        print(\"\\n\" + \"=\" * 80)\n        \n        if success_rate >= 90:\n            print(\"🎉 系统测试整体通过！\")\n        elif success_rate >= 70:\n            print(\"⚠️  系统测试部分通过，需要关注失败的测试\")\n        else:\n            print(\"❌ 系统测试失败较多，需要修复问题\")\n        \n        print(\"=\" * 80)\n\n\nasync def main():\n    \"\"\"主函数\"\"\"\n    # 创建测试报告目录\n    report_dir = project_root / 'test_reports'\n    report_dir.mkdir(exist_ok=True)\n    \n    # 运行系统测试\n    runner = SystemTestRunner()\n    \n    try:\n        results = await runner.run_all_tests()\n        runner.print_summary()\n        \n        # 根据测试结果设置退出码\n        success_rate = (results['summary']['passed'] / results['summary']['total'] * 100) if results['summary']['total'] > 0 else 0\n        \n        if success_rate >= 90:\n            sys.exit(0)  # 成功\n        else:\n            sys.exit(1)  # 失败\n            \n    except KeyboardInterrupt:\n        logger.info(\"测试被用户中断\")\n        sys.exit(130)\n    except Exception as e:\n        logger.error(f\"测试运行出错: {e}\")\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n